import os
import re
import subprocess
import time

from flask import Flask, flash, redirect, render_template, request
from werkzeug.utils import secure_filename

UPLOAD_FOLDER = '/code/uploads'
ALLOWED_EXTENSIONS = {'.asm'}

app = Flask(__name__)
app.secret_key = "NQBuSBaQsboxxVEVXUoWc5x3b3B4Wuke"
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER


def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# Run tests using the uploaded .asm file and the test config.


def runtest(request, filename):
    # return render_template("form.html",output="")
    outputa = {}
    tests = buildsh(request, filename)
    print(tests)
    for test in tests:
        outputa[test]=parseOutput(execute(test, filename),request)
    return render_template("form.html", output=outputa)


# Takes user input and converts to a .sh file that will be executed
def buildsh(request, filename):
    inputa = request.form['text']
    runstrs = []
    input = inputa.replace("\r", "")
    input = input.split("\n")
    for index, line in enumerate(input):
        testtime = int(time.time())
        sessionName = str(index)+str(testtime)+filename.split(".")[0]
        # Setup the tmux session, compile the uploaded asm, enter the lc3sim
        runstrarr = ["#!/bin/bash",
                     "tmux new-session -d -s "+sessionName,
                     'tmux send-keys -t '+sessionName+': "cd uploads/" "Enter"',
                     'tmux send-keys -t '+sessionName+': "./laser " "-a " "' +
                     filename.split(".")[0]+'.asm" "Enter"',
                     'tmux send-keys -t '+sessionName+': "lc3sim" "Enter"'
                     ]
        # Load passed register values
        if request.form['R0']:
            runstrarr.append('tmux send-keys -t '+sessionName+': "r R0 ' +
                             request.form['R0']+'" ' 'Enter')
        if request.form['R1']:
            runstrarr.append('tmux send-keys -t '+sessionName+': "r R1 ' +
                             request.form['R1']+'" ' 'Enter')
        if request.form['R2']:
            runstrarr.append('tmux send-keys -t '+sessionName+': "r R2 ' +
                             request.form['R2']+'" ' 'Enter')
        if request.form['R3']:
            runstrarr.append('tmux send-keys -t '+sessionName+': "r R3 ' +
                             request.form['R3']+'" ' 'Enter')
        if request.form['R4']:
            runstrarr.append('tmux send-keys -t '+sessionName+': "r R4 ' +
                             request.form['R4']+'" ' 'Enter')
        if request.form['R5']:
            runstrarr.append('tmux send-keys -t '+sessionName+': "r R5 ' +
                             request.form['R5']+'" ' 'Enter')
        if request.form['R6']:
            runstrarr.append('tmux send-keys -t '+sessionName+': "r R6 ' +
                             request.form['R6']+'" ' 'Enter')
        if request.form['R7']:
            runstrarr.append('tmux send-keys -t '+sessionName+': "r R7 ' +
                             request.form['R7']+'" ' 'Enter')

        # Load the compiled file and continue with execution of the file.
        runstrarr.append('tmux send-keys -t '+sessionName+': "file " "' +
                         filename.split(".")[0]+'" "Enter"')
        runstrarr.append('tmux send-keys -t '+sessionName+': "c" "Enter"')
        line = line.split(",")
        for x in line:
            if "*ENTER*" in x:
                runstrarr.append('tmux send-keys -t ' +
                             sessionName+': "'+x.replace("*ENTER*","")+'" '+'"Enter"')
            else:
                runstrarr.append('tmux send-keys -t ' +
                             sessionName+': "'+x+'" ')
        runstrarr.append('tmux send-keys -t '+sessionName+': "Enter"')
        runstrarr.append('tmux send-keys -t '+sessionName+': "quit " "Enter"')
        runstrarr.append('tmux send-keys -t '+sessionName+': "./laser -c ' +
                         filename.split('.')[0]+'.asm" "Enter"')
        runstrarr.append('tmux send-keys -t '+sessionName+': "cd ../" "Enter"')
        runstrarr.append('tmux send-keys -t '+sessionName+': "rm '+str(index)+"_"+str(testtime)+"test.sh"+'" "Enter"')
        runstrarr.append('tmux capture-pane -t '+sessionName+': -S - -E - -p')
        runstrarr.append('tmux kill-session -t '+sessionName+':')
        with(open(str(index)+"_"+str(testtime)+"test.sh", "w") as f):
            for i in runstrarr:
                f.write("\n")
                f.write(i)
                f.write("\n")
                f.write("sleep 1")
        runstrs.append(str(index)+"_"+str(testtime)+"test.sh")
    return runstrs


# Execute the script generated by buildsh
def execute(file, filename):
    return(subprocess.check_output(['sh', file]))

def parseOutput(input,request):
    input=str(input).split("\\n") 
    print(input)
    output=[]
    foundlist=[]
    for i in input:
        if str(i).strip() !="":
            output.append(i.replace("\\n",""))
    output.pop()
    regex=str(request.form["ta_regex"])
    for i in output:
        # print(regex,i)
        found=re.findall(regex,str(i),re.IGNORECASE)
        if found:
            foundlist.append(found)
    return foundlist
    return output

@app.route("/", methods=['GET', 'POST'])
def main():
    if request.method == 'POST':
        print(request.form.to_dict())
        if 'file' not in request.files:
            flash("No file part")
            return redirect(request.url)
        file = request.files['file']
        if file.filename == '':
            flash("No file selected")
            return redirect(request.url)
        print(file.filename)
        if file:
            filename = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            return runtest(request, filename)
    else:
        return render_template("form.html", output="")


if __name__ == '__main__':
    app.run(host='0.0.0.0', port='12345', threaded=False, debug=True)
